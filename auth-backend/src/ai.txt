import React, { useState, useEffect } from 'react';
import { View, Text, FlatList, StyleSheet, ActivityIndicator } from 'react-native';
import * as tf from '@tensorflow/tfjs';
import { bundleResourceIO } from '@tensorflow/tfjs-react-native';
import axios from 'axios';
import * as FileSystem from 'expo-file-system';
import * as Asset from 'expo-asset';

const BookRecommendation: React.FC = () => {
  const [model, setModel] = useState<tf.LayersModel | null>(null);
  const [labelEncoders, setLabelEncoders] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [bookSuggestion, setBookSuggestion] = useState<string[]>([]);

  useEffect(() => {
    const loadModelAndEncoders = async () => {
      await tf.ready();

      const modelJson = await Asset.fromModule(require('./models/model.json')).downloadAsync();
      const modelWeights = await Asset.fromModule(require('./models/group1-shard1of1.bin')).downloadAsync();
      const loadedModel = await tf.loadLayersModel(bundleResourceIO(modelJson.localUri, modelWeights.localUri));
      setModel(loadedModel);

      const encoderJson = await FileSystem.readAsStringAsync(FileSystem.documentDirectory + 'label_encoders.json');
      setLabelEncoders(JSON.parse(encoderJson));
      setLoading(false);
    };

    loadModelAndEncoders();
  }, []);

  const encodeUserInfo = (gender: string, ageGroup: string): tf.Tensor => {
    const genderIndex = labelEncoders.gender.indexOf(gender);
    const ageGroupIndex = labelEncoders.age_group.indexOf(ageGroup);

    return tf.tensor2d([[genderIndex, ageGroupIndex]], [1, 2]);
  };

  const recommendBooks = async (gender: string, ageGroup: string, topN: number = 10): Promise<string[]> => {
    if (!model || !labelEncoders) return [];

    const predictions: [string, number][] = [];

    for (const isbn of labelEncoders.isbn) {
      const userInfo = encodeUserInfo(gender, ageGroup);
      const prediction = model.predict(userInfo) as tf.Tensor;
      const predictedValue = (await prediction.data())[0];
      predictions.push([isbn, predictedValue]);
      userInfo.dispose();
      prediction.dispose();
    }

    const sortedPredictions = predictions.sort((a, b) => b[1] - a[1]).slice(0, topN);
    const recommendedIsbns = sortedPredictions.map(([isbn]) => isbn.replace("'", ""));
    return recommendedIsbns;
  };

  useEffect(() => {
    const fetchRecommendations = async () => {
      const recommendations = await recommendBooks('남성', '30대', 10);
      setBookSuggestion(recommendations);
    };

    if (!loading) {
      fetchRecommendations();
    }
  }, [loading]);

  const renderItem = ({ item }: { item: string }) => (
    <View style={styles.item}>
      <Text>{item}</Text>
    </View>
  );

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="#0000ff" />
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <Text style={{ marginTop: 30 }}>사용자 맞춤 추천 도서</Text>
      <View style={styles.scrollView}>
        <FlatList
          data={bookSuggestion}
          renderItem={renderItem}
          keyExtractor={(item) => item}
          horizontal
        />
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
  scrollView: {
    marginTop: 20,
  },
  item: {
    margin: 10,
    padding: 10,
    backgroundColor: '#f9c2ff',
    borderRadius: 5,
  },
});

export default BookRecommendation;
